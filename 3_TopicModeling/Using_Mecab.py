# -*- coding: utf-8 -*-
"""Using_Mecab_Naver_Review_perplexity v0.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PHRll14pMaCY6C1Qjuu80uimNeorcRl1
"""

!pip install konlpy

!apt-get install openjdk-8-jdk-headless -qq > /dev/null
!pip3 install JPype1-py3

import os
os.chdir('/tmp/')
!curl -LO https://bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.1.tar.gz
!tar zxfv mecab-0.996-ko-0.9.1.tar.gz
os.chdir('/tmp/mecab-0.996-ko-0.9.1')
!./configure
!make
!make check
!make install

os.chdir('/tmp')
!curl -LO http://ftpmirror.gnu.org/automake/automake-1.11.tar.gz
!tar -zxvf automake-1.11.tar.gz
os.chdir('/tmp/automake-1.11')
!./configure
!make
!make install

import os
os.chdir('/tmp/')

 
!wget -O m4-1.4.9.tar.gz http://ftp.gnu.org/gnu/m4/m4-1.4.9.tar.gz
!tar -zvxf m4-1.4.9.tar.gz
os.chdir('/tmp/m4-1.4.9')
!./configure
!make
!make install

os.chdir('/tmp')
!curl -OL http://ftpmirror.gnu.org/autoconf/autoconf-2.69.tar.gz
!tar xzf autoconf-2.69.tar.gz
os.chdir('/tmp/autoconf-2.69')
!./configure --prefix=/usr/local
!make
!make install
!export PATH=/usr/local/bin

import os
os.chdir('/tmp')
!curl -LO https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.0.1-20150920.tar.gz
!tar -zxvf mecab-ko-dic-2.0.1-20150920.tar.gz
os.chdir('/tmp/mecab-ko-dic-2.0.1-20150920')
!./autogen.sh
!./configure
!make
# !sh -c 'echo "dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic" > /usr/local/etc/mecabrc'
!make install

os.chdir('/tmp/mecab-ko-dic-2.0.1-20150920')
!ldconfig
!ldconfig -p | grep /usr/local/lib

import os
os.chdir('/tmp')
!curl -LO https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.0.1-20150920.tar.gz
!tar -zxvf mecab-ko-dic-2.0.1-20150920.tar.gz
os.chdir('/tmp/mecab-ko-dic-2.0.1-20150920')
!./autogen.sh
!./configure
!make
# !sh -c 'echo "dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic" > /usr/local/etc/mecabrc'
!make install

# install mecab-python
import os
os.chdir('/content')

!git clone https://bitbucket.org/eunjeon/mecab-python-0.996.git
os.chdir('/content/mecab-python-0.996')

!python3 setup.py build
!python3 setup.py install

# colab에 KoNLPy 설치

!apt-get update
!apt-get install g++ openjdk-8-jdk python-dev python3-dev 
!pip3 install JPype1-py3 
!pip3 install konlpy 
!JAVA_HOME="C:\Program Files\Java\jdk-14.0.2"

# 데이터 불러오기
os.chdir('/content')
import pandas as pd

data = pd.read_csv('preprocessed_data.csv', encoding='utf-8', index_col=0)

# 데이터 살펴보기

data.info()

from konlpy.tag import Mecab
mecab = Mecab()
n_tags = ['NNG', 'NNP', 'NNB', 'VV', "VA" ] # 일반 명사, 고유 명사, 의존 명사, 동사, 형용사

def extract_corpus_mecab(texts):

  extract_corpus = []
  for line in texts:
    if str(line) != 'nan':
      temp = mecab.pos(str(line))
      nouns = []
      for i in range(len(temp)):
        if temp[i][1] in n_tags:
          nouns.append(temp[i][0])
      extract_corpus.append(nouns)

  return extract_corpus

extract_corpus_mecab = extract_corpus_mecab(data['Review'])

print(len(data['Review']), len(extract_corpus_mecab))

# Colab에 Khaiii 설치

!git clone https://github.com/kakao/khaiii.git
!pip install cmake
!mkdir build
!cd build && cmake /content/khaiii
!cd /content/build/ && make all
!cd /content/build/ && make resource
!cd /content/build && make install
!cd /content/build && make package_python
!pip install /content/build/package_python

from khaiii import KhaiiiApi
api = KhaiiiApi()

n_tags = ['NNG', 'NNP', 'NNB', 'VV', "VA" ]
ex = data['Review'][2]
bad_ex = data['Review'][4]

def extract_corpus_khaiii(texts):
    extract_corpus = []
    for line in texts:
      if str(line) != 'nan':
        nouns = []

        for word in api.analyze(str(line)):
          for morphs in word.morphs:
            if morphs.tag in n_tags:
              nouns.append(morphs.lex)

        extract_corpus.append(nouns)

    return extract_corpus

extract_corpus_khaiii = extract_corpus_khaiii(data['Review'])

print(len(extract_corpus_mecab), len(extract_corpus_khaiii))

extract_corpus_mecab[:10]

# Mecab과 Khaiii에 동시에 있는 명사, 동사, 형용사 사용


def mecab_khaiii(mecab_corpus, khaiii_corpus):

  cross_data = []

  for mecab_review, khaiii_review in zip(mecab_corpus, khaiii_corpus):
    temp = []
    for word in mecab_review:
      if word in khaiii_review:
        temp.append(word)
      else:
        continue
    if temp != []: # 비어있는 셀은 제외
      cross_data.append(temp)
    else:
      continue

  return cross_data

cross_data = mecab_khaiii(mecab_corpus=extract_corpus_mecab, khaiii_corpus=extract_corpus_khaiii)
print(len(cross_data))
print(cross_data[:10])

# countvectorize를 위한 역토큰화 진행

detokenized_doc = []

for i in range(len(cross_data)):
  t = ' '.join(cross_data[i])
  detokenized_doc.append(t)

detokenized_doc[:10]

from sklearn.feature_extraction.text import CountVectorizer
vectorizer = CountVectorizer(min_df=3)

vect = vectorizer.fit_transform(detokenized_doc)

vect.toarray().shape

#perplexity 계산

from sklearn.decomposition import LatentDirichletAllocation

perplexityList = []
for ln in range(1,16):
  lda = LatentDirichletAllocation(n_components=ln)
  lda.fit_transform(vect.toarray())

  perplexityList.append(lda.perplexity(vect))

perplexityList

lda = LatentDirichletAllocation(n_components=8)
lda.fit_transform(vect.toarray())

terms = vectorizer.get_feature_names()

def get_topics(components, feature_names, n=10):
    for idx, topic in enumerate(components):
        print("Topic %d:" % (idx+1), [(feature_names[i], topic[i].round(2)) for i in topic.argsort()[:-n - 1:-1]])

get_topics(lda.components_, terms)

lda.perplexity(vect)



from matplotlib import pyplot as plt
x_values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
y_values = perplexityList
plt.plot(x_values, y_values, linestyle=':',marker='s')
plt.ylabel('Perplexity')
plt.xlabel('# of Topics')
plt.show()

